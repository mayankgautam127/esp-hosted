/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: esp_hosted_config.proto */

#ifndef PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED
#define PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _EspHostedCmdGetStatus EspHostedCmdGetStatus;
typedef struct _EspHostedRespGetStatus EspHostedRespGetStatus;
typedef struct _EspHostedCmdSetMacAddress EspHostedCmdSetMacAddress;
typedef struct _EspHostedRespSetMacAddress EspHostedRespSetMacAddress;
typedef struct _EspHostedCmdConfig EspHostedCmdConfig;
typedef struct _EspHostedRespConfig EspHostedRespConfig;
typedef struct _EspHostedScanResult EspHostedScanResult;
typedef struct _EspHostedCmdScanResult EspHostedCmdScanResult;
typedef struct _EspHostedRespScanResult EspHostedRespScanResult;
typedef struct _EspHostedConnectedSTAList EspHostedConnectedSTAList;
typedef struct _EspHostedCmdConnectedSTA EspHostedCmdConnectedSTA;
typedef struct _EspHostedRespConnectedSTA EspHostedRespConnectedSTA;
typedef struct _EspHostedCmdSetPowerSaveMode EspHostedCmdSetPowerSaveMode;
typedef struct _EspHostedRespSetPowerSaveMode EspHostedRespSetPowerSaveMode;
typedef struct _EspHostedCmdGetPowerSaveMode EspHostedCmdGetPowerSaveMode;
typedef struct _EspHostedRespGetPowerSaveMode EspHostedRespGetPowerSaveMode;
typedef struct _EspHostedConfigPayload EspHostedConfigPayload;


/* --- enums --- */

typedef enum _EspHostedEncryptionMode {
  ESP_HOSTED_ENCRYPTION_MODE__Type_Open = 0,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WEP = 1,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WPA_PSK = 2,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WPA2_PSK = 3,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WPA_WPA2_PSK = 4,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WPA2_ENTERPRISE = 5,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WPA3_PSK = 6,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WPA2_WPA3_PSK = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESP_HOSTED_ENCRYPTION_MODE)
} EspHostedEncryptionMode;
typedef enum _EspHostedConfigMsgType {
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetMACAddress = 0,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetMACAddress = 1,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetWiFiMode = 2,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetWiFiMode = 3,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetWiFiMode = 4,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetWiFiMode = 5,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetAPConfig = 6,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetAPConfig = 7,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetAPConfig = 8,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetAPConfig = 9,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetSoftAPConfig = 10,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetSoftAPConfig = 11,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetSoftAPConfig = 12,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetSoftAPConfig = 13,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdDisconnectAP = 14,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespDisconnectAP = 15,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetAPScanList = 16,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetAPScanList = 17,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetConnectedSTAList = 18,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetConnectedSTAList = 19,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetMacAddress = 20,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetMacAddress = 21,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetPowerSaveMode = 22,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetPowerSaveMode = 23,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetPowerSaveMode = 24,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetPowerSaveMode = 25
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESP_HOSTED_CONFIG_MSG_TYPE)
} EspHostedConfigMsgType;

/* --- messages --- */

struct  _EspHostedCmdGetStatus
{
  ProtobufCMessage base;
  char *cmd;
  protobuf_c_boolean has_mode;
  int32_t mode;
};
#define ESP_HOSTED_CMD_GET_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_get_status__descriptor) \
    , NULL, 0,0 }


struct  _EspHostedRespGetStatus
{
  ProtobufCMessage base;
  char *resp;
  protobuf_c_boolean has_mode;
  int32_t mode;
};
#define ESP_HOSTED_RESP_GET_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_get_status__descriptor) \
    , NULL, 0,0 }


struct  _EspHostedCmdSetMacAddress
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mac;
  ProtobufCBinaryData mac;
  protobuf_c_boolean has_mode;
  int32_t mode;
};
#define ESP_HOSTED_CMD_SET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_set_mac_address__descriptor) \
    , 0,{0,NULL}, 0,0 }


struct  _EspHostedRespSetMacAddress
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  ProtobufCBinaryData resp;
};
#define ESP_HOSTED_RESP_SET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_set_mac_address__descriptor) \
    , 0,{0,NULL} }


struct  _EspHostedCmdConfig
{
  ProtobufCMessage base;
  char *ssid;
  char *pwd;
  protobuf_c_boolean has_ecn;
  EspHostedEncryptionMode ecn;
  protobuf_c_boolean has_chnl;
  int32_t chnl;
  protobuf_c_boolean has_max_conn;
  int32_t max_conn;
  protobuf_c_boolean has_ssid_hidden;
  protobuf_c_boolean ssid_hidden;
  char *bssid;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
  char *status;
  protobuf_c_boolean has_bw;
  int32_t bw;
  protobuf_c_boolean has_is_wpa3_supported;
  protobuf_c_boolean is_wpa3_supported;
  protobuf_c_boolean has_listen_interval;
  int32_t listen_interval;
};
#define ESP_HOSTED_CMD_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_config__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0 }


struct  _EspHostedRespConfig
{
  ProtobufCMessage base;
  char *ssid;
  char *pwd;
  protobuf_c_boolean has_ecn;
  EspHostedEncryptionMode ecn;
  protobuf_c_boolean has_chnl;
  int32_t chnl;
  protobuf_c_boolean has_max_conn;
  int32_t max_conn;
  protobuf_c_boolean has_ssid_hidden;
  protobuf_c_boolean ssid_hidden;
  char *bssid;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
  char *status;
  protobuf_c_boolean has_bw;
  int32_t bw;
  protobuf_c_boolean has_is_wpa3_supported;
  protobuf_c_boolean is_wpa3_supported;
  protobuf_c_boolean has_listen_interval;
  int32_t listen_interval;
};
#define ESP_HOSTED_RESP_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_config__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0 }


struct  _EspHostedScanResult
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ssid;
  ProtobufCBinaryData ssid;
  protobuf_c_boolean has_chnl;
  uint32_t chnl;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
  protobuf_c_boolean has_bssid;
  ProtobufCBinaryData bssid;
  protobuf_c_boolean has_ecn;
  EspHostedEncryptionMode ecn;
};
#define ESP_HOSTED_SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_scan_result__descriptor) \
    , 0,{0,NULL}, 0,0, 0,0, 0,{0,NULL}, 0,0 }


struct  _EspHostedCmdScanResult
{
  ProtobufCMessage base;
};
#define ESP_HOSTED_CMD_SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_scan_result__descriptor) \
     }


struct  _EspHostedRespScanResult
{
  ProtobufCMessage base;
  protobuf_c_boolean has_count;
  uint32_t count;
  size_t n_entries;
  EspHostedScanResult **entries;
};
#define ESP_HOSTED_RESP_SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_scan_result__descriptor) \
    , 0,0, 0,NULL }


struct  _EspHostedConnectedSTAList
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mac;
  ProtobufCBinaryData mac;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
};
#define ESP_HOSTED_CONNECTED_STALIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_connected_stalist__descriptor) \
    , 0,{0,NULL}, 0,0 }


struct  _EspHostedCmdConnectedSTA
{
  ProtobufCMessage base;
};
#define ESP_HOSTED_CMD_CONNECTED_STA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_connected_sta__descriptor) \
     }


struct  _EspHostedRespConnectedSTA
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num;
  uint32_t num;
  size_t n_stations;
  EspHostedConnectedSTAList **stations;
};
#define ESP_HOSTED_RESP_CONNECTED_STA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_connected_sta__descriptor) \
    , 0,0, 0,NULL }


struct  _EspHostedCmdSetPowerSaveMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_power_save_mode;
  int32_t power_save_mode;
};
#define ESP_HOSTED_CMD_SET_POWER_SAVE_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_set_power_save_mode__descriptor) \
    , 0,0 }


struct  _EspHostedRespSetPowerSaveMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  ProtobufCBinaryData resp;
};
#define ESP_HOSTED_RESP_SET_POWER_SAVE_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_set_power_save_mode__descriptor) \
    , 0,{0,NULL} }


struct  _EspHostedCmdGetPowerSaveMode
{
  ProtobufCMessage base;
};
#define ESP_HOSTED_CMD_GET_POWER_SAVE_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_get_power_save_mode__descriptor) \
     }


struct  _EspHostedRespGetPowerSaveMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_power_save_mode;
  int32_t power_save_mode;
  protobuf_c_boolean has_resp;
  ProtobufCBinaryData resp;
};
#define ESP_HOSTED_RESP_GET_POWER_SAVE_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_get_power_save_mode__descriptor) \
    , 0,0, 0,{0,NULL} }


typedef enum {
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD__NOT_SET = 0,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_MAC_ADDRESS = 10,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_MAC_ADDRESS = 11,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_WIFI_MODE = 12,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_WIFI_MODE = 13,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_WIFI_MODE = 14,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_WIFI_MODE = 15,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_AP_CONFIG = 16,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_AP_CONFIG = 17,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_AP_CONFIG = 18,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_AP_CONFIG = 19,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_SOFTAP_CONFIG = 20,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_SOFTAP_CONFIG = 21,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_SOFTAP_CONFIG = 22,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_SOFTAP_CONFIG = 23,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_DISCONNECT_AP = 24,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_DISCONNECT_AP = 25,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SCAN_AP_LIST = 26,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SCAN_AP_LIST = 27,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_CONNECTED_STAS_LIST = 28,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_CONNECTED_STAS_LIST = 29,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_MAC_ADDRESS = 30,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_MAC_ADDRESS = 31,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_POWER_SAVE_MODE = 32,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_POWER_SAVE_MODE = 33,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_POWER_SAVE_MODE = 34,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_POWER_SAVE_MODE = 35,
} EspHostedConfigPayload__PayloadCase;

struct  _EspHostedConfigPayload
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msg;
  EspHostedConfigMsgType msg;
  EspHostedConfigPayload__PayloadCase payload_case;
  union {
    EspHostedCmdGetStatus *cmd_get_mac_address;
    EspHostedRespGetStatus *resp_get_mac_address;
    EspHostedCmdGetStatus *cmd_get_wifi_mode;
    EspHostedRespGetStatus *resp_get_wifi_mode;
    EspHostedCmdGetStatus *cmd_set_wifi_mode;
    EspHostedRespGetStatus *resp_set_wifi_mode;
    EspHostedCmdConfig *cmd_get_ap_config;
    EspHostedRespConfig *resp_get_ap_config;
    EspHostedCmdConfig *cmd_set_ap_config;
    EspHostedRespConfig *resp_set_ap_config;
    EspHostedCmdConfig *cmd_get_softap_config;
    EspHostedRespConfig *resp_get_softap_config;
    EspHostedCmdConfig *cmd_set_softap_config;
    EspHostedRespConfig *resp_set_softap_config;
    EspHostedCmdGetStatus *cmd_disconnect_ap;
    EspHostedRespGetStatus *resp_disconnect_ap;
    EspHostedCmdScanResult *cmd_scan_ap_list;
    EspHostedRespScanResult *resp_scan_ap_list;
    EspHostedCmdConnectedSTA *cmd_connected_stas_list;
    EspHostedRespConnectedSTA *resp_connected_stas_list;
    EspHostedCmdSetMacAddress *cmd_set_mac_address;
    EspHostedRespSetMacAddress *resp_set_mac_address;
    EspHostedCmdSetPowerSaveMode *cmd_set_power_save_mode;
    EspHostedRespSetPowerSaveMode *resp_set_power_save_mode;
    EspHostedCmdGetPowerSaveMode *cmd_get_power_save_mode;
    EspHostedRespGetPowerSaveMode *resp_get_power_save_mode;
  };
};
#define ESP_HOSTED_CONFIG_PAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_config_payload__descriptor) \
    , 0,0, ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD__NOT_SET, {0} }


/* EspHostedCmdGetStatus methods */
void   esp_hosted_cmd_get_status__init
                     (EspHostedCmdGetStatus         *message);
size_t esp_hosted_cmd_get_status__get_packed_size
                     (const EspHostedCmdGetStatus   *message);
size_t esp_hosted_cmd_get_status__pack
                     (const EspHostedCmdGetStatus   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_get_status__pack_to_buffer
                     (const EspHostedCmdGetStatus   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdGetStatus *
       esp_hosted_cmd_get_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_get_status__free_unpacked
                     (EspHostedCmdGetStatus *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespGetStatus methods */
void   esp_hosted_resp_get_status__init
                     (EspHostedRespGetStatus         *message);
size_t esp_hosted_resp_get_status__get_packed_size
                     (const EspHostedRespGetStatus   *message);
size_t esp_hosted_resp_get_status__pack
                     (const EspHostedRespGetStatus   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_get_status__pack_to_buffer
                     (const EspHostedRespGetStatus   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespGetStatus *
       esp_hosted_resp_get_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_get_status__free_unpacked
                     (EspHostedRespGetStatus *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdSetMacAddress methods */
void   esp_hosted_cmd_set_mac_address__init
                     (EspHostedCmdSetMacAddress         *message);
size_t esp_hosted_cmd_set_mac_address__get_packed_size
                     (const EspHostedCmdSetMacAddress   *message);
size_t esp_hosted_cmd_set_mac_address__pack
                     (const EspHostedCmdSetMacAddress   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_set_mac_address__pack_to_buffer
                     (const EspHostedCmdSetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdSetMacAddress *
       esp_hosted_cmd_set_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_set_mac_address__free_unpacked
                     (EspHostedCmdSetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespSetMacAddress methods */
void   esp_hosted_resp_set_mac_address__init
                     (EspHostedRespSetMacAddress         *message);
size_t esp_hosted_resp_set_mac_address__get_packed_size
                     (const EspHostedRespSetMacAddress   *message);
size_t esp_hosted_resp_set_mac_address__pack
                     (const EspHostedRespSetMacAddress   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_set_mac_address__pack_to_buffer
                     (const EspHostedRespSetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespSetMacAddress *
       esp_hosted_resp_set_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_set_mac_address__free_unpacked
                     (EspHostedRespSetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdConfig methods */
void   esp_hosted_cmd_config__init
                     (EspHostedCmdConfig         *message);
size_t esp_hosted_cmd_config__get_packed_size
                     (const EspHostedCmdConfig   *message);
size_t esp_hosted_cmd_config__pack
                     (const EspHostedCmdConfig   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_config__pack_to_buffer
                     (const EspHostedCmdConfig   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdConfig *
       esp_hosted_cmd_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_config__free_unpacked
                     (EspHostedCmdConfig *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespConfig methods */
void   esp_hosted_resp_config__init
                     (EspHostedRespConfig         *message);
size_t esp_hosted_resp_config__get_packed_size
                     (const EspHostedRespConfig   *message);
size_t esp_hosted_resp_config__pack
                     (const EspHostedRespConfig   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_config__pack_to_buffer
                     (const EspHostedRespConfig   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespConfig *
       esp_hosted_resp_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_config__free_unpacked
                     (EspHostedRespConfig *message,
                      ProtobufCAllocator *allocator);
/* EspHostedScanResult methods */
void   esp_hosted_scan_result__init
                     (EspHostedScanResult         *message);
size_t esp_hosted_scan_result__get_packed_size
                     (const EspHostedScanResult   *message);
size_t esp_hosted_scan_result__pack
                     (const EspHostedScanResult   *message,
                      uint8_t             *out);
size_t esp_hosted_scan_result__pack_to_buffer
                     (const EspHostedScanResult   *message,
                      ProtobufCBuffer     *buffer);
EspHostedScanResult *
       esp_hosted_scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_scan_result__free_unpacked
                     (EspHostedScanResult *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdScanResult methods */
void   esp_hosted_cmd_scan_result__init
                     (EspHostedCmdScanResult         *message);
size_t esp_hosted_cmd_scan_result__get_packed_size
                     (const EspHostedCmdScanResult   *message);
size_t esp_hosted_cmd_scan_result__pack
                     (const EspHostedCmdScanResult   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_scan_result__pack_to_buffer
                     (const EspHostedCmdScanResult   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdScanResult *
       esp_hosted_cmd_scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_scan_result__free_unpacked
                     (EspHostedCmdScanResult *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespScanResult methods */
void   esp_hosted_resp_scan_result__init
                     (EspHostedRespScanResult         *message);
size_t esp_hosted_resp_scan_result__get_packed_size
                     (const EspHostedRespScanResult   *message);
size_t esp_hosted_resp_scan_result__pack
                     (const EspHostedRespScanResult   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_scan_result__pack_to_buffer
                     (const EspHostedRespScanResult   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespScanResult *
       esp_hosted_resp_scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_scan_result__free_unpacked
                     (EspHostedRespScanResult *message,
                      ProtobufCAllocator *allocator);
/* EspHostedConnectedSTAList methods */
void   esp_hosted_connected_stalist__init
                     (EspHostedConnectedSTAList         *message);
size_t esp_hosted_connected_stalist__get_packed_size
                     (const EspHostedConnectedSTAList   *message);
size_t esp_hosted_connected_stalist__pack
                     (const EspHostedConnectedSTAList   *message,
                      uint8_t             *out);
size_t esp_hosted_connected_stalist__pack_to_buffer
                     (const EspHostedConnectedSTAList   *message,
                      ProtobufCBuffer     *buffer);
EspHostedConnectedSTAList *
       esp_hosted_connected_stalist__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_connected_stalist__free_unpacked
                     (EspHostedConnectedSTAList *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdConnectedSTA methods */
void   esp_hosted_cmd_connected_sta__init
                     (EspHostedCmdConnectedSTA         *message);
size_t esp_hosted_cmd_connected_sta__get_packed_size
                     (const EspHostedCmdConnectedSTA   *message);
size_t esp_hosted_cmd_connected_sta__pack
                     (const EspHostedCmdConnectedSTA   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_connected_sta__pack_to_buffer
                     (const EspHostedCmdConnectedSTA   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdConnectedSTA *
       esp_hosted_cmd_connected_sta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_connected_sta__free_unpacked
                     (EspHostedCmdConnectedSTA *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespConnectedSTA methods */
void   esp_hosted_resp_connected_sta__init
                     (EspHostedRespConnectedSTA         *message);
size_t esp_hosted_resp_connected_sta__get_packed_size
                     (const EspHostedRespConnectedSTA   *message);
size_t esp_hosted_resp_connected_sta__pack
                     (const EspHostedRespConnectedSTA   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_connected_sta__pack_to_buffer
                     (const EspHostedRespConnectedSTA   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespConnectedSTA *
       esp_hosted_resp_connected_sta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_connected_sta__free_unpacked
                     (EspHostedRespConnectedSTA *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdSetPowerSaveMode methods */
void   esp_hosted_cmd_set_power_save_mode__init
                     (EspHostedCmdSetPowerSaveMode         *message);
size_t esp_hosted_cmd_set_power_save_mode__get_packed_size
                     (const EspHostedCmdSetPowerSaveMode   *message);
size_t esp_hosted_cmd_set_power_save_mode__pack
                     (const EspHostedCmdSetPowerSaveMode   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_set_power_save_mode__pack_to_buffer
                     (const EspHostedCmdSetPowerSaveMode   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdSetPowerSaveMode *
       esp_hosted_cmd_set_power_save_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_set_power_save_mode__free_unpacked
                     (EspHostedCmdSetPowerSaveMode *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespSetPowerSaveMode methods */
void   esp_hosted_resp_set_power_save_mode__init
                     (EspHostedRespSetPowerSaveMode         *message);
size_t esp_hosted_resp_set_power_save_mode__get_packed_size
                     (const EspHostedRespSetPowerSaveMode   *message);
size_t esp_hosted_resp_set_power_save_mode__pack
                     (const EspHostedRespSetPowerSaveMode   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_set_power_save_mode__pack_to_buffer
                     (const EspHostedRespSetPowerSaveMode   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespSetPowerSaveMode *
       esp_hosted_resp_set_power_save_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_set_power_save_mode__free_unpacked
                     (EspHostedRespSetPowerSaveMode *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdGetPowerSaveMode methods */
void   esp_hosted_cmd_get_power_save_mode__init
                     (EspHostedCmdGetPowerSaveMode         *message);
size_t esp_hosted_cmd_get_power_save_mode__get_packed_size
                     (const EspHostedCmdGetPowerSaveMode   *message);
size_t esp_hosted_cmd_get_power_save_mode__pack
                     (const EspHostedCmdGetPowerSaveMode   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_get_power_save_mode__pack_to_buffer
                     (const EspHostedCmdGetPowerSaveMode   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdGetPowerSaveMode *
       esp_hosted_cmd_get_power_save_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_get_power_save_mode__free_unpacked
                     (EspHostedCmdGetPowerSaveMode *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespGetPowerSaveMode methods */
void   esp_hosted_resp_get_power_save_mode__init
                     (EspHostedRespGetPowerSaveMode         *message);
size_t esp_hosted_resp_get_power_save_mode__get_packed_size
                     (const EspHostedRespGetPowerSaveMode   *message);
size_t esp_hosted_resp_get_power_save_mode__pack
                     (const EspHostedRespGetPowerSaveMode   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_get_power_save_mode__pack_to_buffer
                     (const EspHostedRespGetPowerSaveMode   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespGetPowerSaveMode *
       esp_hosted_resp_get_power_save_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_get_power_save_mode__free_unpacked
                     (EspHostedRespGetPowerSaveMode *message,
                      ProtobufCAllocator *allocator);
/* EspHostedConfigPayload methods */
void   esp_hosted_config_payload__init
                     (EspHostedConfigPayload         *message);
size_t esp_hosted_config_payload__get_packed_size
                     (const EspHostedConfigPayload   *message);
size_t esp_hosted_config_payload__pack
                     (const EspHostedConfigPayload   *message,
                      uint8_t             *out);
size_t esp_hosted_config_payload__pack_to_buffer
                     (const EspHostedConfigPayload   *message,
                      ProtobufCBuffer     *buffer);
EspHostedConfigPayload *
       esp_hosted_config_payload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_config_payload__free_unpacked
                     (EspHostedConfigPayload *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*EspHostedCmdGetStatus_Closure)
                 (const EspHostedCmdGetStatus *message,
                  void *closure_data);
typedef void (*EspHostedRespGetStatus_Closure)
                 (const EspHostedRespGetStatus *message,
                  void *closure_data);
typedef void (*EspHostedCmdSetMacAddress_Closure)
                 (const EspHostedCmdSetMacAddress *message,
                  void *closure_data);
typedef void (*EspHostedRespSetMacAddress_Closure)
                 (const EspHostedRespSetMacAddress *message,
                  void *closure_data);
typedef void (*EspHostedCmdConfig_Closure)
                 (const EspHostedCmdConfig *message,
                  void *closure_data);
typedef void (*EspHostedRespConfig_Closure)
                 (const EspHostedRespConfig *message,
                  void *closure_data);
typedef void (*EspHostedScanResult_Closure)
                 (const EspHostedScanResult *message,
                  void *closure_data);
typedef void (*EspHostedCmdScanResult_Closure)
                 (const EspHostedCmdScanResult *message,
                  void *closure_data);
typedef void (*EspHostedRespScanResult_Closure)
                 (const EspHostedRespScanResult *message,
                  void *closure_data);
typedef void (*EspHostedConnectedSTAList_Closure)
                 (const EspHostedConnectedSTAList *message,
                  void *closure_data);
typedef void (*EspHostedCmdConnectedSTA_Closure)
                 (const EspHostedCmdConnectedSTA *message,
                  void *closure_data);
typedef void (*EspHostedRespConnectedSTA_Closure)
                 (const EspHostedRespConnectedSTA *message,
                  void *closure_data);
typedef void (*EspHostedCmdSetPowerSaveMode_Closure)
                 (const EspHostedCmdSetPowerSaveMode *message,
                  void *closure_data);
typedef void (*EspHostedRespSetPowerSaveMode_Closure)
                 (const EspHostedRespSetPowerSaveMode *message,
                  void *closure_data);
typedef void (*EspHostedCmdGetPowerSaveMode_Closure)
                 (const EspHostedCmdGetPowerSaveMode *message,
                  void *closure_data);
typedef void (*EspHostedRespGetPowerSaveMode_Closure)
                 (const EspHostedRespGetPowerSaveMode *message,
                  void *closure_data);
typedef void (*EspHostedConfigPayload_Closure)
                 (const EspHostedConfigPayload *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    esp_hosted_encryption_mode__descriptor;
extern const ProtobufCEnumDescriptor    esp_hosted_config_msg_type__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_get_status__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_get_status__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_set_mac_address__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_set_mac_address__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_config__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_config__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_scan_result__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_scan_result__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_scan_result__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_connected_stalist__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_connected_sta__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_connected_sta__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_set_power_save_mode__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_set_power_save_mode__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_get_power_save_mode__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_get_power_save_mode__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_config_payload__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED */
